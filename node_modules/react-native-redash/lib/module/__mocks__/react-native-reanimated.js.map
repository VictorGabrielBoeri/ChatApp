{"version":3,"sources":["react-native-reanimated.ts"],"names":["Platform","Extrapolate","getValue","node","Array","length","AnimatedValue","val","Value","Node","block","arr","proc","cb","add","a","b","sub","divide","multiply","sin","Math","tan","cos","sqrt","min","map","max","pow","reduce","c","index","and","set","setValue","or","modulo","exp","asin","atan","acos","floor","abs","round","ceil","concat","eq","Number","neq","lessThan","greaterThan","greaterOrEq","lessOrEq","not","cond","color","r","g","OS","interpolate","v","inputRange","outputRange","inS","inE","outS","outE","value","progress","resultForNonZeroRange"],"mappings":"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","sourcesContent":["import { Platform } from \"react-native\";\nimport Animated from \"react-native-reanimated\";\n\nenum Extrapolate {\n  EXTEND = \"extend\",\n  CLAMP = \"clamp\",\n  IDENTITY = \"identity\"\n}\n\ninterface InterpolationConfig {\n  inputRange: ReadonlyArray<Animated.Adaptable<number>>;\n  outputRange: ReadonlyArray<Animated.Adaptable<number>>;\n  extrapolate?: Extrapolate;\n  extrapolateLeft?: Extrapolate;\n  extrapolateRight?: Extrapolate;\n}\n\nconst getValue = node => {\n  if (typeof node === \"number\") {\n    return node;\n  }\n  if (node instanceof Array) {\n    return getValue(node[node.length - 1]);\n  }\n  return node[\" __value\"];\n};\n\nclass AnimatedValue {\n  \" __value\": number;\n\n  constructor(val: number) {\n    this[\" __value\"] = val;\n  }\n\n  setValue(val: number) {\n    this[\" __value\"] = val;\n  }\n}\nexport default {\n  Value: AnimatedValue,\n  Node: AnimatedValue,\n  block: arr => arr[arr.length - 1],\n  proc: cb => cb,\n  add: (a, b) => new AnimatedValue(getValue(a) + getValue(b)),\n  sub: (a, b) => new AnimatedValue(getValue(a) - getValue(b)),\n  divide: (a, b) => new AnimatedValue(getValue(a) / getValue(b)),\n  multiply: (a, b) => new AnimatedValue(getValue(a) * getValue(b)),\n  sin: a => new AnimatedValue(Math.sin(getValue(a))),\n  tan: a => new AnimatedValue(Math.tan(getValue(a))),\n  cos: a => new AnimatedValue(Math.cos(getValue(a))),\n  sqrt: a => new AnimatedValue(Math.sqrt(getValue(a))),\n  min: (...a) => new AnimatedValue(Math.min(...a.map(b => getValue(b)))),\n  max: (...a) => new AnimatedValue(Math.max(...a.map(b => getValue(b)))),\n  pow: (...a) =>\n    new AnimatedValue(\n      a.reduce((b, c, index) => (index > 0 ? getValue(b) ** getValue(c) : c), 0)\n    ),\n  and: (a, b) => new AnimatedValue(getValue(a) && getValue(b)),\n  set: (a, b) => {\n    a.setValue(getValue(b));\n    return a;\n  },\n  or: (a, b) => new AnimatedValue(getValue(a) || getValue(b)),\n  modulo: (a, b) => new AnimatedValue(getValue(a) % getValue(b)),\n  exp: a => new AnimatedValue(Math.exp(getValue(a))),\n  asin: a => new AnimatedValue(Math.asin(getValue(a))),\n  atan: a => new AnimatedValue(Math.atan(getValue(a))),\n  acos: a => new AnimatedValue(Math.acos(getValue(a))),\n  floor: a => new AnimatedValue(Math.floor(getValue(a))),\n  abs: a => new AnimatedValue(Math.abs(getValue(a))),\n  round: a => new AnimatedValue(Math.round(getValue(a))),\n  ceil: a => new AnimatedValue(Math.ceil(getValue(a))),\n  concat: (a, b) => getValue(a) + b,\n  eq: (a, b) => new AnimatedValue(Number(getValue(a) === getValue(b))),\n  neq: (a, b) => new AnimatedValue(Number(getValue(a) !== getValue(b))),\n  lessThan: (a, b) => new AnimatedValue(Number(getValue(a) < getValue(b))),\n  greaterThan: (a, b) => new AnimatedValue(Number(getValue(a) > getValue(b))),\n  greaterOrEq: (a, b) => new AnimatedValue(Number(getValue(a) >= getValue(b))),\n  lessOrEq: (a, b) => new AnimatedValue(Number(getValue(a) <= getValue(b))),\n  not: a => new AnimatedValue(Number(!getValue(a))),\n  cond: (a, b, c) => new AnimatedValue(getValue(a) ? getValue(b) : getValue(c)),\n  color: (r, g, b, a = 1) => {\n    const color =\n      16777216 * Math.round(getValue(a) * 255) +\n      65536 * getValue(r) +\n      256 * getValue(g) +\n      getValue(b);\n    if (Platform.OS === \"android\") {\n      // on Android color is represented as signed 32 bit int\n      if (color < (1 << 31) >>> 0) {\n        return new AnimatedValue(color);\n      }\n      return new AnimatedValue(color - 2 ** 32);\n    }\n    return new AnimatedValue(color);\n  },\n  interpolate: (\n    v: Animated.Value<number>,\n    { inputRange, outputRange }: InterpolationConfig\n  ) => {\n    const [inS, inE] = [getValue(inputRange[0]), getValue(inputRange[1])];\n    const [outS, outE] = [getValue(outputRange[0]), getValue(outputRange[1])];\n    const value = getValue(v);\n    const progress = (value - inS) / (inE - inS);\n    // logic below was made in order to provide a compatibility witn an Animated API\n    const resultForNonZeroRange = outS + progress * (outE - outS);\n    if (inS === inE) {\n      if (value <= inS) {\n        return outS;\n      }\n      return outE;\n    }\n    return resultForNonZeroRange;\n  },\n  Extrapolate\n};\n"]}