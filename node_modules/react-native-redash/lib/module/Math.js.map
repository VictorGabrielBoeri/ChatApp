{"version":3,"sources":["Math.ts"],"names":["Animated","set","cond","add","multiply","lessThan","abs","divide","sub","min2","min","max2","max","greaterThan","pow","and","greaterOrEq","lessOrEq","proc","bin","value","inc","dec","args","reduce","acc","arg","clamp","lowerBound","upperBound","between","inclusive","approximates","a","b","precision","toRad","deg","Math","PI","toDeg","rad","atan2Proc","y","x","coeff1","coeff2","absY","angle","atan2","cubicBezier","t","p0","p1","p2","p3","term","c","d"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  set,\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  divide,\n  sub,\n  min: min2,\n  max: max2,\n  greaterThan,\n  pow,\n  and,\n  greaterOrEq,\n  lessOrEq,\n  proc\n} = Animated;\n\nexport const bin = (value: boolean): 0 | 1 => (value ? 1 : 0);\n\nexport const inc = (value: Animated.Value<number>) => set(value, add(value, 1));\n\nexport const dec = (value: Animated.Value<number>) => set(value, sub(value, 1));\n\nexport const min = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => min2(acc, arg));\n\nexport const max = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => max2(acc, arg));\n\nexport const clamp = (\n  value: Animated.Adaptable<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>\n): Animated.Node<number> => min2(max2(lowerBound, value), upperBound);\n\nexport const between = (\n  value: Animated.Node<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>,\n  inclusive = true\n) => {\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\n\nexport const approximates = (\n  a: Animated.Adaptable<number>,\n  b: Animated.Adaptable<number>,\n  precision: Animated.Adaptable<number> = 0.001\n) => lessThan(abs(sub(a, b)), precision);\n\nexport const toRad = (deg: Animated.Adaptable<number>): Animated.Node<number> =>\n  multiply(deg, Math.PI / 180);\n\nexport const toDeg = (rad: Animated.Adaptable<number>): Animated.Node<number> =>\n  multiply(rad, 180 / Math.PI);\n\n// https://en.wikipedia.org/wiki/Atan2\n// https://www.gamedev.net/forums/topic/441464-manually-implementing-atan2-or-atan/\n// https://developer.download.nvidia.com/cg/atan2.html\nconst atan2Proc = proc(\n  (y: Animated.Adaptable<number>, x: Animated.Adaptable<number>) => {\n    const coeff1 = Math.PI / 4;\n    const coeff2 = 3 * coeff1;\n    const absY = abs(y);\n    const angle = cond(\n      greaterOrEq(x, 0),\n      [sub(coeff1, multiply(coeff1, divide(sub(x, absY), add(x, absY))))],\n      [sub(coeff2, multiply(coeff1, divide(add(x, absY), sub(absY, x))))]\n    );\n    return cond(lessThan(y, 0), multiply(angle, -1), angle);\n  }\n);\n\nexport const atan2 = (\n  y: Animated.Adaptable<number>,\n  x: Animated.Adaptable<number>\n): Animated.Node<number> => atan2Proc(y, x);\n\nexport const cubicBezier = (\n  t: Animated.Adaptable<number>,\n  p0: Animated.Adaptable<number>,\n  p1: Animated.Adaptable<number>,\n  p2: Animated.Adaptable<number>,\n  p3: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const term = sub(1, t);\n  const a = multiply(1, pow(term, 3), pow(t, 0), p0);\n  const b = multiply(3, pow(term, 2), pow(t, 1), p1);\n  const c = multiply(3, pow(term, 1), pow(t, 2), p2);\n  const d = multiply(1, pow(term, 0), pow(t, 3), p3);\n  return add(a, b, c, d);\n};\n"]}