{"version":3,"sources":["Animations.ts"],"names":["Animated","useMemoOne","min","Clock","Value","set","add","multiply","cond","eq","abs","sub","interpolate","not","diff","lessThan","greaterThan","useCode","divide","modulo","proc","moving","position","minPositionDelta","emptyFrameThreshold","delta","noMovementFrames","snapPoint","value","velocity","points","point","diffPoint","p","deltas","map","minDelta","reduce","acc","bInterpolate","origin","destination","inputRange","outputRange","useValues","values","deps","v","useNamedValues","result","Object","keys","forEach","key","useClocks","numberOfClocks","Array","fill","useDiff","node","dDiff","addTo","subTo","multiplyTo","divideTo","moduloTo"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport { useMemoOne } from \"use-memo-one\";\n\nimport { min } from \"./Math\";\n\nconst {\n  Clock,\n  Value,\n  set,\n  add,\n  multiply,\n  cond,\n  eq,\n  abs,\n  sub,\n  interpolate,\n  not,\n  diff,\n  lessThan,\n  greaterThan,\n  useCode,\n  divide,\n  modulo,\n  proc\n} = Animated;\n\nexport type SpringConfig = Partial<Omit<Animated.SpringConfig, \"toValue\">>;\nexport type TimingConfig = Partial<Omit<Animated.TimingConfig, \"toValue\">>;\n\nexport const moving = (\n  position: Animated.Node<number>,\n  minPositionDelta = 1e-3,\n  emptyFrameThreshold = 5\n) => {\n  const delta = diff(position);\n  const noMovementFrames = new Value(0);\n  return cond(\n    lessThan(abs(delta), minPositionDelta),\n    [\n      set(noMovementFrames, add(noMovementFrames, 1)),\n      not(greaterThan(noMovementFrames, emptyFrameThreshold))\n    ],\n    [set(noMovementFrames, 0), 1]\n  );\n};\n\nexport const snapPoint = (\n  value: Animated.Adaptable<number>,\n  velocity: Animated.Adaptable<number>,\n  points: Animated.Adaptable<number>[]\n) => {\n  const point = add(value, multiply(0.2, velocity));\n  const diffPoint = (p: Animated.Adaptable<number>) => abs(sub(point, p));\n  const deltas = points.map(p => diffPoint(p));\n  const minDelta = min(...deltas);\n  return points.reduce(\n    (acc, p) => cond(eq(diffPoint(p), minDelta), p, acc),\n    new Value()\n  );\n};\n\nexport const bInterpolate = (\n  value: Animated.Adaptable<number>,\n  origin: Animated.Adaptable<number>,\n  destination: Animated.Adaptable<number>\n) =>\n  interpolate(value, {\n    inputRange: [0, 1],\n    outputRange: [origin, destination]\n  });\n\ntype Dependencies = readonly unknown[];\ntype Atomic = string | number | boolean;\n\nexport const useValues = <V extends Atomic>(\n  values: V[],\n  deps: Dependencies\n): Animated.Value<V>[] =>\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemoOne(() => values.map(v => new Value(v)), deps);\n\nexport const useNamedValues = <V extends Atomic, K extends string>(\n  values: Record<K, V>,\n  deps: Dependencies\n): Record<K, Animated.Value<V>> =>\n  useMemoOne(() => {\n    const result: Record<string, Animated.Value<V>> = {};\n    Object.keys(values).forEach(key => {\n      result[key as K] = new Value(values[key as K]);\n    });\n    return result;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\nexport const useClocks = (\n  numberOfClocks: number,\n  deps: Dependencies\n): Animated.Clock[] =>\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemoOne(() => new Array(numberOfClocks).fill(0).map(() => new Clock()), [\n    deps\n  ]);\n\nexport const useDiff = (node: Animated.Node<number>, deps: Dependencies) => {\n  const [dDiff] = useValues<number>([0], deps);\n  useCode(() => set(dDiff, diff(node)), [dDiff, node]);\n  return dDiff;\n};\n\nexport const addTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, add(value, node))\n);\n\nexport const subTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, sub(value, node))\n);\n\nexport const multiplyTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, multiply(value, node))\n);\n\nexport const divideTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, divide(value, node))\n);\n\nexport const moduloTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, modulo(value, node))\n);\n"]}